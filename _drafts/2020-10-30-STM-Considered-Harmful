---
layout: post
title: "State Machine Diagram Considered Harmful"
date: 2020-10-30
description: The state machine diagram is one of the most popular diagrams for behaviour in SysML and UML. It's dangerous and and here's why.
tags:
- Systems Engineering
- Modelling
- SysML
comments: true
---

In the grand tradition of language bloggers, started by Edsgar Dijkstra himself with *goto considered harmful*, it is time to trash a commonly used language feature. This time in UML \& SysML. SysML has a few behavioural diagram types: the use case diagram, the sequence diagram, the activity diagram, the parametrics diagram (parametrics are behaviour: fight me) and the state machine diagram. After the sequence diagram, the state machine diagram is probably the most used diagram for behavioural specification. In this blog post, I'm going to tell you why that's bad.

The state machine diagram is (mostly) a representation of the computer science concept of a *Finite State Automaton*. This is a model of computation where the computer passes through a number of states. In each state, the computer can accept one of a number of predetermined stimuli which causes the computer to transition into another state. Although not turing complete, finite state machines can be used as a model for any terminating (not running forever) computation. There is nothing wrong with using FSMs for modelling behaviour, but their representation in SysML has a @@

## The Problem

State machine diagrams are ubiquitous in SysML models but they should be considered harmful for the following reasons:

- Many behaviours in systems are pure. State machines are a bad representation of this.

- @@

@@ Describe each problem in more detail

## The Path to Totality

One of the @@ For all possible inputs of a function there should be a defined output which is reachable in a finite amount of time. 